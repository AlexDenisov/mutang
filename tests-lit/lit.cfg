import platform
import re

import lit.formats

# The paths passed by CMake as env variables to LIT get escaped so we have to
# undo it to pass it down to the LIT tests.
# Example: "-isystem\ /opt/llvm-3.9.0/include/c++/v1 ..."
def unescape_string(string):
    return re.sub(r'\\ ', ' ', string)

def get_os_filename_string():
    if platform.system() == 'Darwin':
        return "macOS"
    if platform.system() == 'Linux':
        return "Linux"
    print("error: lit.cfg could not detect OS")
    return "Unknown"

def get_mull_portable_exec(llvm_path):
    components = [ mull_exec ]

    if get_os_filename_string() == 'Linux':
        linux_env = 'LD_LIBRARY_PATH={}/lib'.format(llvm_path)
        linux_flags = '-ld-search-path={}/lib -ld-search-path=/usr/lib/x86_64-linux-gnu -ld-search-path=/lib/x86_64-linux-gnu'.format(llvm_path)

        components.insert(0, linux_env)
        components.append(linux_flags)

    return ' '.join(components)


config.name = "Mull integration tests"
config.test_format = lit.formats.ShTest("0")

# LLVM LIT: Is it possible to pass user defined parameter into a test script?
# https://stackoverflow.com/a/39861848/598057
current_dir = os.environ.get('CURRENT_DIR', '')
clang_cc = os.environ.get('clang_cc', '')
clang_cxx = os.environ.get('clang_cxx', '')
clang_exec = os.environ.get('CLANG_EXEC', '')
mull_exec = os.environ.get('MULL_EXEC', '')
filecheck_exec = os.environ.get('FILECHECK_EXEC', '')
llvm_path = os.environ.get('PATH_TO_LLVM', '')
llvm_major_version = os.environ.get('LLVM_VERSION_MAJOR', '')
test_cxx_flags = os.environ.get('TEST_CXX_FLAGS', '')

assert llvm_path
assert llvm_major_version
assert test_cxx_flags

test_cxx_flags = unescape_string(test_cxx_flags)

portable_mull_exec = get_mull_portable_exec(llvm_path)

config.substitutions.append(('%CURRENT_DIR', current_dir))
config.substitutions.append(('%clang_cc', clang_cc))
config.substitutions.append(('%clang_cxx', clang_cxx))
config.substitutions.append(('%CLANG_EXEC', clang_exec))
config.substitutions.append(('%MULL_EXEC', portable_mull_exec))
config.substitutions.append(('%FILECHECK_EXEC', filecheck_exec))
config.substitutions.append(('%LLVM_PATH', llvm_path))
config.substitutions.append(('%TEST_CXX_FLAGS', test_cxx_flags))

config.suffixes = ['.cpp', '.c']

if int(llvm_major_version) >= 8:
  config.available_features.add('LLVM_8_OR_HIGHER')
